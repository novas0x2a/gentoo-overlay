From 71202fdc65311bc5ab417a97fbe0d692c5fb9a30 Mon Sep 17 00:00:00 2001
From: Mike Lundy <mike@fluffypenguin.org>
Date: Thu, 5 Feb 2009 17:36:44 -0800
Subject: [PATCH 6/6] return error code from delegate

---
 dc1394/conversions.c |   64 +++++++++++++++++++++++++------------------------
 1 files changed, 33 insertions(+), 31 deletions(-)

diff --git a/dc1394/conversions.c b/dc1394/conversions.c
index 9ce49c6..76af0bd 100644
--- a/dc1394/conversions.c
+++ b/dc1394/conversions.c
@@ -563,27 +563,27 @@ dc1394_convert_to_YUV422(uint8_t *src, uint8_t *dest, uint32_t width, uint32_t h
 {
     switch(source_coding) {
     case DC1394_COLOR_CODING_YUV422:
-        dc1394_YUV422_to_YUV422(src, dest, width, height, byte_order);
+        return dc1394_YUV422_to_YUV422(src, dest, width, height, byte_order);
         break;
     case DC1394_COLOR_CODING_YUV411:
-        dc1394_YUV411_to_YUV422(src, dest, width, height, byte_order);
+        return dc1394_YUV411_to_YUV422(src, dest, width, height, byte_order);
         break;
     case DC1394_COLOR_CODING_YUV444:
-        dc1394_YUV444_to_YUV422(src, dest, width, height, byte_order);
+        return dc1394_YUV444_to_YUV422(src, dest, width, height, byte_order);
         break;
     case DC1394_COLOR_CODING_RGB8:
-        dc1394_RGB8_to_YUV422(src, dest, width, height, byte_order);
+        return dc1394_RGB8_to_YUV422(src, dest, width, height, byte_order);
         break;
     case DC1394_COLOR_CODING_MONO8:
     case DC1394_COLOR_CODING_RAW8:
-        dc1394_MONO8_to_YUV422(src, dest, width, height, byte_order);
+        return dc1394_MONO8_to_YUV422(src, dest, width, height, byte_order);
         break;
     case DC1394_COLOR_CODING_MONO16:
     case DC1394_COLOR_CODING_RAW16:
-        dc1394_MONO16_to_YUV422(src, dest, width, height, byte_order, bits);
+        return dc1394_MONO16_to_YUV422(src, dest, width, height, byte_order, bits);
         break;
     case DC1394_COLOR_CODING_RGB16:
-        dc1394_RGB16_to_YUV422(src, dest, width, height, byte_order, bits);
+        return dc1394_RGB16_to_YUV422(src, dest, width, height, byte_order, bits);
         break;
     default:
         return DC1394_FUNCTION_NOT_SUPPORTED;
@@ -600,7 +600,7 @@ dc1394_convert_to_MONO8(uint8_t *restrict src, uint8_t *restrict dest, uint32_t
 {
     switch(source_coding) {
     case DC1394_COLOR_CODING_MONO16:
-        dc1394_MONO16_to_MONO8(src, dest, width, height, bits);
+        return dc1394_MONO16_to_MONO8(src, dest, width, height, bits);
         break;
     case DC1394_COLOR_CODING_MONO8:
         memcpy(dest, src, width*height);
@@ -619,24 +619,24 @@ dc1394_convert_to_RGB8(uint8_t *restrict src, uint8_t *restrict dest, uint32_t w
 {
     switch(source_coding) {
     case DC1394_COLOR_CODING_RGB16:
-        dc1394_RGB16_to_RGB8 (src, dest, width, height, bits);
+        return dc1394_RGB16_to_RGB8 (src, dest, width, height, bits);
         break;
     case DC1394_COLOR_CODING_YUV444:
-        dc1394_YUV444_to_RGB8 (src, dest, width, height);
+        return dc1394_YUV444_to_RGB8 (src, dest, width, height);
         break;
     case DC1394_COLOR_CODING_YUV422:
-        dc1394_YUV422_to_RGB8 (src, dest, width, height, byte_order);
+        return dc1394_YUV422_to_RGB8 (src, dest, width, height, byte_order);
         break;
     case DC1394_COLOR_CODING_YUV411:
-        dc1394_YUV411_to_RGB8 (src, dest, width, height);
+        return dc1394_YUV411_to_RGB8 (src, dest, width, height);
         break;
     case DC1394_COLOR_CODING_MONO8:
     case DC1394_COLOR_CODING_RAW8:
-        dc1394_MONO8_to_RGB8 (src, dest, width, height);
+        return dc1394_MONO8_to_RGB8 (src, dest, width, height);
         break;
     case DC1394_COLOR_CODING_MONO16:
     case DC1394_COLOR_CODING_RAW16:
-        dc1394_MONO16_to_RGB8 (src, dest, width, height,bits);
+        return dc1394_MONO16_to_RGB8 (src, dest, width, height,bits);
         break;
     case DC1394_COLOR_CODING_RGB8:
       memcpy(dest, src, width*height*3);
@@ -723,33 +723,33 @@ dc1394_convert_frames(dc1394video_frame_t *in, dc1394video_frame_t *out)
         switch(in->color_coding) {
         case DC1394_COLOR_CODING_YUV422:
             Adapt_buffer_convert(in,out);
-            dc1394_YUV422_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
+            return dc1394_YUV422_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
             break;
         case DC1394_COLOR_CODING_YUV411:
             Adapt_buffer_convert(in,out);
-            dc1394_YUV411_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
+            return dc1394_YUV411_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
             break;
         case DC1394_COLOR_CODING_YUV444:
             Adapt_buffer_convert(in,out);
-            dc1394_YUV444_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
+            return dc1394_YUV444_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
             break;
         case DC1394_COLOR_CODING_RGB8:
             Adapt_buffer_convert(in,out);
-            dc1394_RGB8_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
+            return dc1394_RGB8_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
             break;
         case DC1394_COLOR_CODING_MONO8:
         case DC1394_COLOR_CODING_RAW8:
             Adapt_buffer_convert(in,out);
-            dc1394_MONO8_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
+            return dc1394_MONO8_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order);
             break;
         case DC1394_COLOR_CODING_MONO16:
         case DC1394_COLOR_CODING_RAW16:
             Adapt_buffer_convert(in,out);
-            dc1394_MONO16_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order, in->data_depth);
+            return dc1394_MONO16_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order, in->data_depth);
             break;
         case DC1394_COLOR_CODING_RGB16:
             Adapt_buffer_convert(in,out);
-            dc1394_RGB16_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order, in->data_depth);
+            return dc1394_RGB16_to_YUV422(in->image, out->image, in->size[0], in->size[1], out->yuv_byte_order, in->data_depth);
             break;
         default:
             return DC1394_FUNCTION_NOT_SUPPORTED;
@@ -759,7 +759,7 @@ dc1394_convert_frames(dc1394video_frame_t *in, dc1394video_frame_t *out)
         switch(in->color_coding) {
         case DC1394_COLOR_CODING_MONO16:
             Adapt_buffer_convert(in,out);
-            dc1394_MONO16_to_MONO8(in->image, out->image, in->size[0], in->size[1], in->data_depth);
+            return dc1394_MONO16_to_MONO8(in->image, out->image, in->size[0], in->size[1], in->data_depth);
             break;
         case DC1394_COLOR_CODING_MONO8:
             Adapt_buffer_convert(in,out);
@@ -773,29 +773,29 @@ dc1394_convert_frames(dc1394video_frame_t *in, dc1394video_frame_t *out)
         switch(in->color_coding) {
         case DC1394_COLOR_CODING_RGB16:
             Adapt_buffer_convert(in,out);
-            dc1394_RGB16_to_RGB8 (in->image, out->image, in->size[0], in->size[1], in->data_depth);
+            return dc1394_RGB16_to_RGB8 (in->image, out->image, in->size[0], in->size[1], in->data_depth);
             break;
         case DC1394_COLOR_CODING_YUV444:
             Adapt_buffer_convert(in,out);
-            dc1394_YUV444_to_RGB8 (in->image, out->image, in->size[0], in->size[1]);
+            return dc1394_YUV444_to_RGB8 (in->image, out->image, in->size[0], in->size[1]);
             break;
         case DC1394_COLOR_CODING_YUV422:
             Adapt_buffer_convert(in,out);
-            dc1394_YUV422_to_RGB8 (in->image, out->image, in->size[0], in->size[1], in->yuv_byte_order);
+            return dc1394_YUV422_to_RGB8 (in->image, out->image, in->size[0], in->size[1], in->yuv_byte_order);
             break;
         case DC1394_COLOR_CODING_YUV411:
             Adapt_buffer_convert(in,out);
-            dc1394_YUV411_to_RGB8 (in->image, out->image, in->size[0], in->size[1]);
+            return dc1394_YUV411_to_RGB8 (in->image, out->image, in->size[0], in->size[1]);
             break;
         case DC1394_COLOR_CODING_MONO8:
         case DC1394_COLOR_CODING_RAW8:
             Adapt_buffer_convert(in,out);
-            dc1394_MONO8_to_RGB8 (in->image, out->image, in->size[0], in->size[1]);
+            return dc1394_MONO8_to_RGB8 (in->image, out->image, in->size[0], in->size[1]);
             break;
         case DC1394_COLOR_CODING_MONO16:
         case DC1394_COLOR_CODING_RAW16:
             Adapt_buffer_convert(in,out);
-            dc1394_MONO16_to_RGB8 (in->image, out->image, in->size[0], in->size[1],in->data_depth);
+            return dc1394_MONO16_to_RGB8 (in->image, out->image, in->size[0], in->size[1],in->data_depth);
             break;
         case DC1394_COLOR_CODING_RGB8:
             Adapt_buffer_convert(in,out);
@@ -903,11 +903,13 @@ dc1394_deinterlace_stereo_frames(dc1394video_frame_t *in, dc1394video_frame_t *o
         (in->color_coding==DC1394_COLOR_CODING_YUV422)) {
         switch (method) {
         case DC1394_STEREO_METHOD_INTERLACED:
-            err=Adapt_buffer_stereo(in,out);
-            dc1394_deinterlace_stereo(in->image, out->image, out->size[0], out->size[1]);
+            if ( ( err = Adapt_buffer_stereo(in,out) ) != DC1394_SUCCESS )
+                return err;
+            return dc1394_deinterlace_stereo(in->image, out->image, out->size[0], out->size[1]);
             break;
         case DC1394_STEREO_METHOD_FIELD:
-            err=Adapt_buffer_stereo(in,out);
+            if ( ( err = Adapt_buffer_stereo(in,out) ) != DC1394_SUCCESS )
+                return err;
             memcpy(out->image,in->image,out->image_bytes);
         break;
         }
-- 
1.6.1

